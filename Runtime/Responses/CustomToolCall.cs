// Licensed under the MIT License. See LICENSE in the project root for license information.

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityEngine.Scripting;

namespace OpenAI.Responses
{
    /// <summary>
    /// A call to a custom tool created by the model.
    /// </summary>
    [Preserve]
    public sealed class CustomToolCall : BaseResponse, IResponseItem, IToolCall
    {
        [Preserve]
        public CustomToolCall(string callId, string name, string input)
        {
            CallId = callId;
            Name = name;
            Input = input;
        }

        [JsonConstructor]
        internal CustomToolCall(
            [JsonProperty("id")] string id,
            [JsonProperty("object")] string @object,
            [JsonProperty("status")] ResponseStatus status,
            [JsonProperty("call_id")] string callId,
            [JsonProperty("name")] string name,
            [JsonProperty("input")] string input)
        {
            Id = id;
            Object = @object;
            Status = status;
            CallId = callId;
            Name = name;
            Input = input;
            Type = ResponseItemType.CustomToolCall;
        }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Id { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("type", DefaultValueHandling = DefaultValueHandling.Include)]
        public ResponseItemType Type { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("object", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Object { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public ResponseStatus Status { get; }

        /// <summary>
        /// An identifier used to map this custom tool call to a tool call output.
        /// </summary>
        [Preserve]
        [JsonProperty("call_id")]
        public string CallId { get; }

        /// <summary>
        /// The name of the custom tool being called.
        /// </summary>
        [Preserve]
        [JsonProperty("name")]
        public string Name { get; }

        [JsonIgnore]
        public JToken Arguments => null;

        /// <summary>
        /// The input for the custom tool call generated by the model.
        /// </summary>
        [Preserve]
        [JsonProperty("input")]
        public string Input { get; internal set; }

        private string delta;

        [Preserve]
        [JsonIgnore]
        public string Delta
        {
            get => delta;
            internal set
            {
                if (value == null)
                {
                    delta = null;
                }
                else
                {
                    delta += value;
                }
            }
        }
    }
}
