// Licensed under the MIT License. See LICENSE in the project root for license information.

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OpenAI.Extensions;
using System.Threading;
using System.Threading.Tasks;
using UnityEngine.Scripting;

namespace OpenAI.Responses
{
    /// <summary>
    /// A tool call to run a function.
    /// </summary>
    [Preserve]
    public sealed class FunctionToolCall : BaseResponse, IResponseItem, IToolCall
    {
        [Preserve]
        public FunctionToolCall(string callId, string name, JToken arguments)
        {
            CallId = callId;
            Name = name;
            Arguments = arguments;
        }

        [Preserve]
        [JsonConstructor]
        internal FunctionToolCall(
            [JsonProperty("id")] string id,
            [JsonProperty("type")] ResponseItemType type,
            [JsonProperty("object")] string @object,
            [JsonProperty("status")] ResponseStatus status,
            [JsonProperty("call_id")] string callId,
            [JsonProperty("name")] string name,
            [JsonProperty("arguments")] JToken arguments)
        {
            Id = id;
            Type = type;
            Object = @object;
            Status = status;
            CallId = callId;
            Name = name;
            Arguments = arguments;
        }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Id { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("type", DefaultValueHandling = DefaultValueHandling.Include)]
        public ResponseItemType Type { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("object", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Object { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public ResponseStatus Status { get; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [Preserve]
        [JsonProperty("call_id")]
        public string CallId { get; }

        /// <summary>
        /// The name of the function to run.
        /// </summary>
        [Preserve]
        [JsonProperty("name")]
        public string Name { get; }

        private string argumentsString;

        private JToken arguments;

        /// <summary>
        /// The arguments to use when calling the function.
        /// </summary>
        [Preserve]
        [JsonProperty("arguments", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public JToken Arguments
        {
            get
            {
                if (arguments == null)
                {
                    if (!string.IsNullOrWhiteSpace(argumentsString))
                    {
                        arguments = JToken.FromObject(argumentsString, OpenAIClient.JsonSerializer);
                    }
                    else
                    {
                        arguments = null;
                    }
                }

                return arguments;
            }
            internal set => arguments = value;
        }

        [JsonIgnore]
        internal string Delta
        {
            set => argumentsString += value;
        }

        [Preserve]
        public FunctionToolCallOutput InvokeFunction()
            => new(this, ToolExtensions.InvokeFunction(this));

        [Preserve]
        public FunctionToolCallOutput<T> InvokeFunction<T>(JsonSerializerSettings options = null)
        {
            var result = ToolExtensions.InvokeFunction<T>(this);
            return new(this, result, JsonConvert.SerializeObject(new { result }, options ?? OpenAIClient.JsonSerializationOptions));
        }

        [Preserve]
        public async Task<FunctionToolCallOutput> InvokeFunctionAsync(CancellationToken cancellationToken = default)
        {
            var result = await ToolExtensions.InvokeFunctionAsync(this, cancellationToken).ConfigureAwait(false);
            return new(this, result);
        }

        [Preserve]
        public async Task<FunctionToolCallOutput<T>> InvokeFunctionAsync<T>(JsonSerializerSettings options = null, CancellationToken cancellationToken = default)
        {
            var result = await this.InvokeFunctionAsync<T>(cancellationToken).ConfigureAwait(false);
            return new(this, result, JsonConvert.SerializeObject(new { result }, options ?? OpenAIClient.JsonSerializationOptions));
        }
    }
}
