// Licensed under the MIT License. See LICENSE in the project root for license information.

using Newtonsoft.Json;
using UnityEngine.Scripting;

namespace OpenAI.Responses
{
    /// <summary>
    /// A tool call to run a function.
    /// </summary>
    [Preserve]
    public sealed class FunctionToolCall : IResponseItem
    {
        [Preserve]
        [JsonConstructor]
        internal FunctionToolCall(
            [JsonProperty("id")] string id,
            [JsonProperty("type")] ResponseItemType type,
            [JsonProperty("object")] string @object,
            [JsonProperty("status")] ResponseStatus status,
            [JsonProperty("call_id")] string callId,
            [JsonProperty("name")] string name,
            [JsonProperty("arguments")] string arguments,
            [JsonProperty("output")] string output)
        {
            Id = id;
            Type = type;
            Object = @object;
            Status = status;
            CallId = callId;
            Name = name;
            Arguments = arguments;
            Output = output;
        }

        [Preserve]
        public FunctionToolCall(Tool tool)
        {
            Type = ResponseItemType.FunctionCall;
            Name = tool.Function.Name;
            Arguments = tool.Function.Arguments?.ToString() ?? string.Empty;
        }

        [Preserve]
        public FunctionToolCall(ToolCall toolCall, string output)
        {
            Type = ResponseItemType.FunctionCallOutput;
            Name = toolCall.Function.Name;
            CallId = toolCall.Id;
            Output = output;
        }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Id { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("type", DefaultValueHandling = DefaultValueHandling.Include)]
        public ResponseItemType Type { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("object", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Object { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public ResponseStatus Status { get; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [Preserve]
        [JsonProperty("call_id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string CallId { get; }

        /// <summary>
        /// The name of the function to run.
        /// </summary>
        [Preserve]
        [JsonProperty("name")]
        public string Name { get; }

        /// <summary>
        /// A JSON string of the arguments to pass to the function.
        /// </summary>
        [Preserve]
        [JsonProperty("arguments", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Arguments { get; }

        /// <summary>
        /// A JSON string of the output of the function tool call.
        /// </summary>
        [Preserve]
        [JsonProperty("output", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Output { get; }
    }
}
