// Licensed under the MIT License. See LICENSE in the project root for license information.

using Newtonsoft.Json;
using UnityEngine.Scripting;

namespace OpenAI.Responses
{
    [Preserve]
    public class FunctionToolCallOutput : BaseResponse, IResponseItem
    {
        [Preserve]
        public FunctionToolCallOutput(FunctionToolCall toolCall, string output)
        {
            CallId = toolCall.CallId;
            Output = output;
        }

        [Preserve]
        public FunctionToolCallOutput(string callId, string output)
        {
            CallId = callId;
            Output = output;
        }

        [Preserve]
        [JsonConstructor]
        internal FunctionToolCallOutput(
            [JsonProperty("id")] string id,
            [JsonProperty("object")] string @object,
            [JsonProperty("status")] ResponseStatus status,
            [JsonProperty("call_id")] string callId,
            [JsonProperty("output")] string output)
        {
            Id = id;
            Object = @object;
            Status = status;
            CallId = callId;
            Output = output;
        }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Id { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("type", DefaultValueHandling = DefaultValueHandling.Include)]
        public ResponseItemType Type { get; } = ResponseItemType.FunctionCallOutput;

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("object", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Object { get; }

        /// <inheritdoc />
        [Preserve]
        [JsonProperty("status", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public ResponseStatus Status { get; }

        /// <summary>
        /// The unique ID of the function tool call generated by the model.
        /// </summary>
        [Preserve]
        [JsonProperty("call_id", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string CallId { get; }

        /// <summary>
        /// A JSON string of the output of the function tool call.
        /// </summary>
        [Preserve]
        [JsonProperty("output", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string Output { get; }

        [Preserve]
        public override string ToString()
            => Output;
    }

    [Preserve]
    public sealed class FunctionToolCallOutput<T> : FunctionToolCallOutput
    {
        [Preserve]
        public static implicit operator T(FunctionToolCallOutput<T> output) => output.OutputResult;

        [Preserve]
        public FunctionToolCallOutput(FunctionToolCall toolCall, T outputResult, string output)
          : base(toolCall, output)
        {
            OutputResult = outputResult;
        }

        [Preserve]
        [JsonIgnore]
        public T OutputResult { get; internal set; }
    }
}
